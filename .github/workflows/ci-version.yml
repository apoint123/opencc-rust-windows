name: CI-version

on:
  push:
    tags:
      - "v*"

env:
  CARGO_TERM_COLOR: always

jobs:
  rustfmt:
    name: Format Check
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          toolchain: nightly
          components: rustfmt
      - uses: actions-rust-lang/rustfmt@v1

  clippy:
    name: Clippy Lint
    runs-on: ubuntu-latest
    steps:
      - name: Install OpenCC for analysis
        run: |
          sudo apt update
          sudo apt install -y doxygen cmake wget
          wget https://github.com/BYVoid/OpenCC/archive/refs/tags/ver.1.1.9.tar.gz
          tar xf ver.1.1.9.tar.gz
          cd OpenCC-*
          make -j$(nproc) PREFIX=/usr
          sudo make PREFIX=/usr install
      - uses: actions/checkout@v4
      - uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          components: clippy
      - name: Run Clippy
        run: cargo clippy --all-targets --all-features -- -D warnings

  test-windows:
    name: Test on Windows
    runs-on: windows-latest
    strategy:
      fail-fast: false
      matrix:
        toolchain:
          - stable
          - nightly
        features:
          - "default"
          - "static-dictionaries"
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@master
        with:
          toolchain: ${{ matrix.toolchain }}

      - name: Setup MSVC Developer Environment
        uses: TheMrMilchmann/setup-msvc-dev@v3
        with:
          arch: x64

      - name: Copy MSVC Runtime DLLs for testing
        run: |
          $dll_dir = (Get-ChildItem -Path "$env:VCToolsRedistDir" -Filter "vcruntime140.dll" -Recurse | Select-Object -First 1).DirectoryName
          Write-Host "Found MSVC DLLs at: $dll_dir"
          Copy-Item -Path "$dll_dir\*.dll" -Destination "target/debug/deps/"
        shell: pwsh

      - name: Run tests with ${{ matrix.features }} features
        if: matrix.features == 'default'
        run: cargo test --release
      - name: Run tests with ${{ matrix.features }} features
        if: matrix.features != 'default'
        run: cargo test --release --features ${{ matrix.features }}

  test-linux:
    name: Test on Linux
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        toolchain:
          - stable
        features:
          - "default"
          - "static-dictionaries"
    steps:
      - name: Install OpenCC
        run: |
          sudo apt update
          sudo apt install -y doxygen cmake wget
          wget https://github.com/BYVoid/OpenCC/archive/refs/tags/ver.1.1.9.tar.gz
          tar xf ver.1.1.9.tar.gz
          cd OpenCC-*
          make -j$(nproc) PREFIX=/usr
          sudo make PREFIX=/usr install
      - run: sudo ldconfig
      - uses: actions/checkout@v4
      - uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          toolchain: ${{ matrix.toolchain }}
      - name: Run tests with ${{ matrix.features }} features
        if: matrix.features == 'default'
        run: cargo test --release
      - name: Run tests with ${{ matrix.features }} features
        if: matrix.features != 'default'
        run: cargo test --release --features ${{ matrix.features }}